(Anim
   (description
      "Base class for animatable objects. Anim objects change\n        their state or other objects.")
   (allowed_dirs)
   (editor
      (rate
         int
         (list RATE_ENUM)
         (help
            "Rate to animate"))
      (animate
         script
         (script
            {$this animate})
         (help
            "Launch animation"))
      (animate_loop
         script
         (script
            {$this
               animate
               (loop)})
         (help
            "Launch looping animation"))
      (stop_animation
         script
         (script
            {$this stop_animation})
         (help
            "Stop animation")))
   (views
      (animating
         {$this is_animating}
         ("current frame"
            {$this frame}))))
(Poll
   (description
      "Abstract base class for pollable RND objects")
   (allowed_dirs)
   (editor
      (enter
         script
         (script
            {$this enter}))
      (exit
         script
         (script
            {$this exit})))
   (types))
(PropAnim
   (description
      "Animate any properties on target object")
   (ext anim)
   (superclasses Anim)
   (types)
   (editor
      (target
         object
         (class Object)
         (refresh prop_keys))
      (prop_keys
         (array
            (struct
               (prop
                  string
                  (read_only TRUE))
               ('Select Property'
                  script
                  (script
                     {do
                        ($prop
                           {milo
                              select_prop
                              [target]})
                        {if
                           {&&
                              $prop
                              {>
                                 {size $prop}
                                 0}}
                           {set
                              [prop_keys
                                 {elem $milo_prop_path 1}
                                 prop]
                              $prop}}})
                  (refresh prop_keys))
               (keys
                  (array
                     (struct
                        (frame float)
                        (value float))))))
         (hide
            {!
               [target]}))))
(AnimFilter
   (description
      "An AnimFilter object modifies the playing of another animatable object")
   (superclasses Anim)
   (ext filt)
   (types)
   (editor
      (anim
         object
         (post_sync
            {milo update_open_editor AnimFilter})
         (list
            {$this
               safe_anims
               {milo cur_dir}})
         (help
            "Animatable object that receives filtered frame"))
      (start
         float
         (help
            "Overriden start frame of animation"))
      (end
         float
         (help
            "Overriden end frame of animation"))
      (offset
         float
         (help
            "Amount to offset frame for animation"))
      (scale
         float
         (read_only
            {!=
               [period]
               0.0})
         (help
            "Multiplier to speed of animation"))
      (period
         float
         (refresh scale)
         (help
            "Alternative to scale, overriden period of animation"))
      (type
         int
         (list ANIM_ENUM)
         (help
            "How to treat the frame outside of start and end"))))
(Blur
   (description
      "A Blur object renders an object with more transparency at\n                 older positions. It is drawable and should replace the\n                 blurred object as a draw child.")
   (superclasses Draw)
   (ext blur)
   (types))
(Cam
   (description
      "A Camera object is drawable and transformable. When drawn\n                 it sets up projection and clipping parameters for\n                 subsequent draw siblings.")
   (superclasses Trans)
   (ext cam)
   (types)
   (editor
      (near_plane
         float
         (help
            "The distance in world coordinates to the near clipping\n            plane. The near/far ratio is limited to 1:1000 to preserve\n            Z-buffer resolution."))
      (far_plane
         float
         (help
            "The distance in world coordinates to the far clipping\n            plane. The near/far ratio is limited to 1:1000 to preserve\n            Z-buffer resolution. Note that on the PS2, object polys are\n            culled rather than clipped to the far plane."))
      (y_fov float)
      (z_range
         VECTOR2
         (help
            "The part of the Z-buffer to use, in normalized\n            coordinates. It can be useful to draw a scene where the near\n            and far planes must exceed the 1:1000 ratio (so multiple\n            cameras are used to draw farthest to nearest objects, each\n            using a closer range of the z-buffer) or to leave some\n            z-buffer for HUD overlay objects."))
      (screen_rect
         RECT
         (help
            "The area of the screen in normalized coordinates\n            (0 to 1) to draw into."))
      (target_tex
         object
         (class Tex)
         (help
            "An optional Texture to render into. This automatically\n            sets or unsets the 'render' flag on the Texture object (see\n            Tex editor).")
         (pre_sync
            {if
               [target_tex]
               {milo
                  record
                  [target_tex]
                  reset_tex_render}
               {[target_tex]
                  set_rendered
                  FALSE}})
         (post_sync
            {if
               [target_tex]
               {milo
                  record
                  [target_tex]
                  set_tex_render}
               {[target_tex]
                  set_rendered
                  TRUE}}))))
(CamAnim
   (description
      "A CamAnim object animates Camera properties.")
   (superclasses Anim)
   (ext cnm)
   (types))
(TexRenderer
   (description
      "TexRender renders a proxy into a texture.")
   (superclasses Anim Draw)
   (ext rndtex)
   (types)
   (editor
      (proxy
         object
         (class RndDir)
         (help
            "Proxy Object to render to texture"))
      (output_texture
         object
         (class Tex)
         (help
            "Texture to write to"))
      (force
         bool
         (help
            "Force rendering every frame"))
      (imposter_height
         float
         (help
            "Height for imposter rendering with current camera"))))
(Cursor
   (description
      "A Cursor object displays Text like a teletype console.\n         <p>For each frame of animation, the mask and cursor will move to\n            uncover one character. To animate multiple Text objects being\n            uncovered by Cursors one after another, and to control the\n            speed of Cursor animation, create a Scale/Offset anim filter\n            for each Cursor object. A negative offset can delay a Cursor's\n            animation until the Text before it has been fully uncovered.</p>")
   (superclasses Anim Draw)
   (ext curs)
   (types))
(Draw
   (description
      "Base class for drawable objects. Draw objects either\n        render polys or determine rendering state.")
   (allowed_dirs)
   (editor
      (showing
         bool
         (help
            "Whether the object and its Draw children are drawn or collided with.")
         (post_sync
            {milo invalidate_listers_and_trees}))
      (draw_order float)
      (sphere
         SPHERE
         (help
            "bounding sphere"))
      (update_sphere
         script
         (help
            "Calculates the bounding sphere for the object.")
         (script
            {milo record $this update_sphere}
            {$this update_sphere})
         (refresh sphere)))
   (views
      (showing
         ("Showing"
            [showing])
         ("Draw Order"
            [draw_order]))))
(Environ
   (description
      "An environment object is drawable. When drawn it sets up\n        dynamic lighting and fogging for subsequently drawn siblings.")
   (ext env)
   (types)
   (editor
      (lights
         (array
            object
            (list
               {$this allowable_lights}))
         (help
            "Dynamic lights for this environment"))
      (ambient_color
         color
         (help
            "Ambient color for this environment"))
      (fog_enable
         bool
         (help
            "Whether fog is enabled for this environment")
         (refresh fog_color fog_start fog_end))
      (fog_color
         color
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog color"))
      (fog_start
         float
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog start distance"))
      (fog_end
         float
         (read_only
            {!
               {$this get fog_enable}})
         (help
            "Fog end distance"))
      (animate_from_preset
         bool
         (help
            "Whether this environment should be animated by light presets"))
      (ng
         (indent
            (fade_out
               bool
               (help
                  "Fade out the scene over distance"))
            (fade_start
               float
               (help
                  "World space distance from camera to start fading"))
            (fade_end
               float
               (help
                  "World space distance fade out completely")))
         (help
            "Next-generation graphics settings"))))
(EnvAnim
   (description
      "An EnvAnim object animates Environ properties.")
   (superclasses Anim)
   (ext enm)
   (types))
(Flare
   (description
      "Flare objects are particles that are rendered based on\n        the visibility of their center.<br />\n        Use them to implement sun flare peeking through tree leaves and\n        around buildings, flares on lamps and stage lights that get\n        occluded by characters, etc.  Flares should be drawn last in a\n        frame, and since they depend on the z-buffer for visibility\n        testing, previously drawn translucent or cutout objects must\n        properly use translucent or SrcAlphaCutout materials.")
   (superclasses Draw Trans)
   (ext flare)
   (types))
(Font
   (description
      "Font objects determine the appearance for Text objects.")
   (ext font)
   (types))
(Generator
   (description
      "A Generator object flies out object instances along a path.")
   (superclasses Anim Draw Trans)
   (ext gen)
   (types))
(Group
   (description
      "Represents a group of objects to which to propogate\n        animation and messages.")
   (superclasses Anim Draw Trans)
   (ext grp)
   (types)
   (editor
      (environ
         object
         (class Environ))
      (sort_draws
         script
         (script
            {$this sort_draws})
         (help
            "Sort objects by draw_order and material")
         (post_sync
            {milo update_objects}))
      (lod
         object
         (class Draw)
         (obj_flags no_this)
         (help
            "Object to draw instead below lod_screen_size"))
      (lod_screen_size
         float
         (help
            "Ratio of screen height for lod"))))
(Light
   (description
      "Light objects are added to environments for drawing.")
   (superclasses Trans)
   (ext lit)
   (types)
   (editor
      (type
         int
         (list
            ("kLightPoint"
               "kLightDirectional"
               "kLightFakeSpot"
               "kLightFloorSpot"))
         (help
            "Type of dynamic lighting")
         (refresh fakespot floorspot))
      (range
         float
         (help
            "Falloff distance for point lights"))
      (color
         color
         (help
            "Color of light")
         (refresh intensity))
      (intensity
         float
         (help
            "Intensity of light color")
         (refresh color))
      (fakespot
         (indent
            (topradius
               float
               (help
                  "Fake cone small radius at the source"))
            (botradius
               float
               (help
                  "Fake cone big radius at the far end"))
            (softness
               float
               (help
                  "Fake cone softness with 0 hard edge and 1 total mushy")
               (range 0 1))
            (displacement
               float
               (help
                  "Amount along dir to adjust the fake spot position")
               (range 0 1)))
         (hide
            {!=
               [type]
               2})
         (help
            "Fake spot light parameters"))
      (floorspot
         (indent
            (topradius
               float
               (help
                  "Fake cone small radius at the source"))
            (botradius
               float
               (help
                  "Fake cone big radius at the far end"))
            (texture
               object
               (class Tex)
               (help
                  "Projected floor spot texture"))
            (shadowcasters
               (array
                  object
                  (class Draw))
               (help
                  "Objects to generate shadow map from")))
         (hide
            {!=
               [type]
               3})
         (help
            "Floor spot light parameters"))
      (animate_color_from_preset
         bool
         (help
            "Animation authority for LightPreset"))
      (animate_position_from_preset
         bool
         (help
            "Animation authority for LightPreset"))))
(LightAnim
   (description
      "LightAnim objects animate light object properties using keyframe interpolation.")
   (superclasses Anim)
   (ext lnm)
   (types))
(Line
   (description
      "Line objects represent 3D lines with thickness, perspective, and optional end caps.")
   (superclasses Draw Trans)
   (ext line)
   (types))
(Mat
   (description
      "Material objects determine texturing, blending, and the\n        effect of lighting on drawn polys.")
   (ext mat)
   (types)
   (editor
      (color
         color
         (help
            "Base material color"))
      (alpha
         float
         (help
            "Base material alpha"))
      (use_environ
         bool
         (help
            "Modulate with environment ambient and lights"))
      (prelit
         bool
         (help
            "Use vertex color and alpha for base or ambient"))
      (diffuse_tex
         object
         (class Tex)
         (help
            "Base texture map, modulated with color and alpha")
         (refresh intensify))
      (intensify
         bool
         (help
            "Double the intensity of base map")
         (read_only
            {!
               [diffuse_tex]}))
      (tex_wrap
         int
         (list TEXWRAP_ENUM)
         (help
            "Texture mapping mode"))
      (tex_gen
         int
         (list TEXGEN_ENUM)
         (help
            "How to generate texture coordinates"))
      (tex_xfm
         TRANSFORM
         (help
            "Transform for coordinate generation"))
      (blend
         int
         (list BLEND_ENUM)
         (help
            "How to blend poly into screen"))
      (z_mode
         int
         (list ZMODE_ENUM)
         (help
            "How to read and write z-buffer"))
      (alpha_cut
         bool
         (help
            "Cut zero alpha pixels from z-buffer"))
      (alpha_write
         bool
         (help
            "Write pixel alpha to screen"))
      (next_pass
         object
         (class Mat)
         (list
            {$this allowed_next_pass})
         (help
            "Next material for object"))
      (ng
         (indent
            (cull
               bool
               (help
                  "Cull backface polygons"))
            (stencil_mode
               int
               (list STENCILMODE_ENUM)
               (help
                  "How to read and write the stencil buffer"))
            (per_pixel_lit
               bool
               (help
                  "Use per-pixel lighting"))
            (emissive_multiplier
               float
               (help
                  "Multiplier to apply to emission"))
            (emissive_map
               object
               (class Tex)
               (help
                  "Map for self illumination"))
            (specular_rgb
               color
               (help
                  "Color to use when not driven by texture"))
            (specular_power
               float
               (help
                  "Power to use when not driven by texture"))
            (specular_map
               object
               (class Tex)
               (help
                  "Texture map for specular color and power"))
            (normal_map
               object
               (class Tex)
               (list
                  {$this allowed_normal_map})
               (help
                  "Texture map to define lighting normals"))
            (normalize
               bool
               (help
                  "Normalize tangent-space matrix -- DO NOT USE"))
            (custom_diffuse_map
               object
               (class Tex)
               (help
                  "Texture map for diffuse lighting calculation"))
            (environ_map
               object
               (class CubeTex)
               (help
                  "Cube texture for reflections")))
         (help
            "Next-generation graphics settings")))
   (views
      (alpha_write
         (alpha_write
            {$this get alpha_write}))
      (Diffuse_tex
         (diffuse_tex
            [diffuse_tex])
         (tex_size_kb
            {if_else
               [diffuse_tex]
               {[diffuse_tex]
                  size_kb}
               0}))
      (culling
         (cull
            [cull]))))
(MatAnim
   (description
      "MatAnim objects animate material properties.")
   (superclasses Anim)
   (ext mnm)
   (types))
(Mesh
   (description
      "A Mesh object is composed of triangle faces.")
   (superclasses Draw Trans)
   (ext mesh)
   (types)
   (views
      (size
         ("faces"
            {$this num_faces})
         ("verts"
            {$this num_verts}))))
(MeshAnim
   (description
      "A MeshAnim object animates Mesh vertices. This should be\n        done only when an effect can't be achieved with material\n        animation, because animating vertices directly is less efficient.")
   (superclasses Anim)
   (ext msnm)
   (types))
(Morph
   (description
      "A Morph object animates between multiple Mesh poses using\n        weight keyframes. This is an expensive technique, equivalent to a\n        MeshAnim for each active pose, so use only when skinning or a\n        single MeshAnim isn't enough. For example, we use it for\n        viseme-driven facial animation.")
   (superclasses Anim)
   (ext morph)
   (types))
(Movie
   (description
      "A Movie object animates a compressed video through a\n        texture. It works on Xbox and PS2 now, soon GC.")
   (superclasses Anim)
   (ext mov)
   (types)
   (editor
      (movie_file
         file
         (help
            "File - extension is automatically converted to platform"))
      (stream
         bool
         (help
            "Stream the file for this movie?"))
      (loop
         bool
         (help
            "Loop this movie?"))
      (tex
         object
         (class Tex)
         (help
            "Texture to animate."))))
(MultiMesh
   (description
      "A MultiMesh object draws a simple Mesh in many places\n        quickly. Create a multimesh by instancing the base mesh lots of\n        times in Max, then using the multiobject wizard.")
   (superclasses Draw)
   (ext mm)
   (types))
(ParticleSys
   (description
      "A ParticleSys object generates, animates, and draws large\n        numbers of similar sprites. Currently particles are rendered only\n        as points on the PC.")
   (superclasses Poll Anim Draw Trans)
   (ext part)
   (types)
   (views
      (size
         ("max_particles"
            {$this max_particles}))))
(ParticleSysAnim
   (description
      "Object that animates Particle System properties.")
   (superclasses Anim)
   (ext panim)
   (types))
(ScreenMask
   (description
      "Draws full screen quad with material and color.")
   (superclasses Draw)
   (ext mask)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help
            "Material to draw on full screen quad"))
      (color
         color
         (help
            "Color of full screen quad"))
      (alpha
         float
         (help
            "Translucency of full screen quad"))
      (screen_rect
         RECT
         (help
            "The area of the screen in normalized coordinates (0 to 1) to draw into."))
      (use_cam_rect
         bool
         (help
            "Use current camera screen_rect instead of the full screen"))))
(RndDir
   (description
      "A RndDir specially tracks drawable and animatable objects.")
   (editor
      (environ
         object
         (class Environ))
      (polls
         (array
            object
            (class Poll))
         (help
            "List of all the polls")
         (read_only TRUE)))
   (superclasses ObjectDir Anim Draw Trans Poll)
   (types
      (world_fx
         (editor
            (start
               script
               (script
                  {$this start})
               (help
                  "Start animation"))
            (stop
               script
               (script
                  {$this stop})
               (help
                  "Stop animation")))
         (enter
            {$this stop})
         (exit
            {$this stop})
         (start
            {$this
               animate
               (range 0 kHugeFloat)}
            {$this set_showing TRUE})
         (stop
            {$this stop_animation}
            {$this set_showing FALSE}
            {$this
               iterate
               RndParticleSys
               $parts
               {$parts free_all_particles}}))))
(PostProc
   (description
      "A PostProc drives post-processing effects.")
   (ext pp)
   (editor
      (bloom
         (indent
            (bloom_threshold_red
               float
               (help
                  "Red intensity at which to bloom")
               (range 0.0 4.0))
            (bloom_threshold_green
               float
               (help
                  "Green intensity at which to bloom")
               (range 0.0 4.0))
            (bloom_threshold_blue
               float
               (help
                  "Blue intensity at which to bloom")
               (range 0.0 4.0))
            (bloom_threshold_white
               float
               (help
                  "White intensity at which to bloom")
               (range 0.0 4.0))
            (bloom_kernel_multiplier
               float
               (help
                  "Bloom kernel multiplier"))
            (bloom_scale
               float
               (help
                  "Bloom scale"))
            (bloom_intensity
               float
               (help
                  "Bloom intensity")
               (range 0.0 1.0))))
      (luminance_map
         object
         (class Tex)
         (help
            "Luminance map"))
      (exposure_flicker
         (indent
            (intensity
               float
               (help
                  "Intensity range [0..1], 0.0 to disable")
               (range 0.0 1.0))
            (secs_range
               VECTOR2
               (help
                  "Min & max number of seconds for a light to dark cycle"))))
      (noise
         (indent
            (noise_base_scale
               VECTOR2
               (help
                  "X and Y tiling of the noise map"))
            (noise_intensity
               float
               (help
                  "intensity of the noise [-1..1], 0.0 to disable")
               (range -1.0 1.0))
            (noise_map
               object
               (class Tex)
               (help
                  "Optional noise bitmap"))))
      (color_correct
         (indent
            (hue
               float
               (help
                  "Hue: -180 to 180, 0.0 is neutral")
               (range -180 180)
               (refresh color_xfm))
            (saturation
               float
               (help
                  "Saturation: -100 to 100, 0.0 is neutral")
               (range -100 100)
               (refresh color_xfm))
            (lightness
               float
               (help
                  "Lightness: -100 to 100, 0.0 is neutral")
               (range -100 100)
               (refresh color_xfm))
            (contrast
               float
               (help
                  "Contrast: -100 to 100, 0.0 is neutral")
               (range -100 100)
               (refresh color_xfm))
            (brightness
               float
               (help
                  "Brightness: -100 to 100, 0.0 is neutral")
               (range -100 100)
               (refresh color_xfm))
            (color_xfm
               (indent
                  (red_select
                     VECTOR3
                     (help
                        "Color to feed red channel"))
                  (red_bias
                     float
                     (help
                        "Bias on red channel (neg lowers)"))
                  (grn_select
                     VECTOR3
                     (help
                        "Color to feed green channel"))
                  (grn_bias
                     float
                     (help
                        "Bias on green channel (neg lowers)"))
                  (blu_select
                     VECTOR3
                     (help
                        "Color to feed blue channel"))
                  (blu_bias
                     float
                     (help
                        "Bias on blue channel (neg lowers)")))
               #ifndef _DEBUG
               (hide TRUE)
               #endif
               (help
                  "Generated color transformation matrix"))))
      (emulate_fps
         float
         (help
            "Frame rate to emulate, e.g. 24 for film. 0 disables emulation.")
         (range 0.0 60.0))
      (light_trail
         (indent
            (threshold
               float
               (help
                  "Min pixel value to leave trails [0..1]")
               (range 0.0 1.0))
            (duration
               float
               (help
                  "Seconds for the trails to last"))))
      (select
         script
         (help
            "Set this as the current post processing effect for preview.")
         (script
            {$this select}))
      (unselect
         script
         (help
            "Turn off all post-processing effects.")
         (script
            {rnd reset_postproc})))
   (types))
(Tex
   (description
      "Tex objects represent bitmaps used by materials. These\n        can be created automatically with 'import tex' on the file menu.")
   (ext tex)
   (types)
   (views
      (size
         ("Width"
            [width])
         ("Height"
            [height])
         ("Bpp"
            [bpp])
         ("Size in kb"
            {$this size_kb}))))
(CubeTex
   (description
      "This class implements a cube map intended for environment mapping.")
   (ext cube)
   (types)
   (editor
      (right file)
      (left file)
      (top file)
      (bottom file)
      (back file)
      (front file)))
(Set
   (description
      "A group of objects to propagate animation and messages")
   (ext set)
   (editor
      (objects
         (array
            object
            (list
               {$this allowed_objects})))
      (highlight_objects
         script
         (script
            {milo
               set_highlights
               {$this get_array objects}})))
   (types
      (Spotlights
         (editor
            (color
               color
               (help
                  "Color of the spotlight"))
            (intensity
               float
               (help
                  "Intensity of the spotlight")))
         (color 0)
         (intensity 0))
      ('Show set'
         (editor
            (showing bool))
         (showing TRUE))))
(Text
   (description
      "A Text object draws a 3D character string.")
   (superclasses Draw Trans)
   (ext txt)
   (types))
(Trans
   (description
      "Base class for transformable objects. Trans objects have\n        a 3D position, rotation, and scale.")
   (ext trans)
   (types)
   (views
      ('Local transform'
         (x
            {$this get_local_pos_index 0}
            {$this set_local_pos_index 0 $milo_value})
         (y
            {$this get_local_pos_index 1}
            {$this set_local_pos_index 1 $milo_value})
         (z
            {$this get_local_pos_index 2}
            {$this set_local_pos_index 2 $milo_value})
         (pitch
            {$this get_local_rot_index 0}
            {$this set_local_rot_index 0 $milo_value})
         (roll
            {$this get_local_rot_index 1}
            {$this set_local_rot_index 1 $milo_value})
         (yaw
            {$this get_local_rot_index 2}
            {$this set_local_rot_index 2 $milo_value})
         ("scale x"
            {$this get_local_scale_index 0}
            {$this set_local_scale_index 0 $milo_value})
         ("scale y"
            {$this get_local_scale_index 1}
            {$this set_local_scale_index 1 $milo_value})
         ("scale z"
            {$this get_local_scale_index 2}
            {$this set_local_scale_index 2 $milo_value}))))
(TransAnim
   (description
      "TransAnim objects animate the position, rotation, and\n        scale of transformable objects.")
   (superclasses Anim)
   (ext tnm)
   (types)
   (views
      (num_keys
         (trans
            {$this num_trans_keys})
         (rot
            {$this num_rot_keys})
         (scale
            {$this num_scale_keys})
         ("is key owner"
            {if_else
               {==
                  $this
                  [keys_owner]}
               True
               False}))))
(TransArray
   (description
      "This object points to a bunch of Transformables and sets\n	their transforms based on various type-dependent layouts.")
   (superclasses Poll Trans)
   (ext tar)
   (editor
      (targets
         (array
            object
            (class Trans))
         (help
            "Transformables we will layout, based on our type properties")))
   (types
      (grid
         (editor
            (rows
               int
               (range 1 256)
               (help
                  "Elements along y-axis"))
            (cols
               int
               (range 1 256)
               (help
                  "Elements along x-axis"))
            (row_spacing
               float
               (range 0 10000)
               (help
                  "Spacing between rows"))
            (col_spacing
               float
               (range 0 10000)
               (help
                  "Spacing between columns"))
            (row_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh row_keys))
                     (value
                        float
                        (range 0 1000)))))
            (col_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh col_keys))
                     (value
                        float
                        (range 0 1000)))))
            (row_spacing_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh row_spacing_keys))
                     (value
                        float
                        (range 0 10000)))))
            (col_spacing_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh col_spacing_keys))
                     (value
                        float
                        (range 0 10000)))))))
      (ring
         (editor
            (radius
               float
               (range 0 10000)
               (help
                  "Radius of ring"))
            (rotate
               bool
               (help
                  "Rotate each element around ring center"))
            (invert_order
               bool
               (help
                  "Invert element placing order"))
            (radius_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh radius_keys))
                     (value
                        float
                        (range 0 10000)))))))
      (trans_anim
         (editor
            (trans_anim
               object
               (class TransAnim)
               (help
                  "TransAnim to distribute place evenly along"))
            (start
               float
               (help
                  "Start frame of trans_anim"))
            (end
               float
               (help
                  "End frame of trans_anim"))
            (offset
               float
               (help
                  "Frame offset for laying out elements"))
            (offset_keys
               (array
                  (struct
                     (frame
                        float
                        (refresh offset_keys))
                     (value
                        float
                        (range 0 100000)))))))))
(MeshDeform
   (description
      "Reskins target mesh according to exobones.")
   (superclasses)
   (ext deform)
   (types)
   (editor
      (mesh
         object
         (class Trans)
         (help
            "The mesh we will change")
         (read_only TRUE))
      (reskin
         script
         (script
            {$this reskin FALSE})
         (help
            "Reskins based on where exobones are now"))
      (reskin_all
         script
         (script
            {$this reskin_all FALSE})
         (help
            "Reskins based on where exobones are now"))))